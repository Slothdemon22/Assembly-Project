functionGnericBitmaps:
    push bp
    mov bp, sp
    sub sp, 4          ; Make space for 2 local variables (xEnding and yEnding)
    push es
    push ax
    push bx
    push cx
    push dx
    push di
    push si
   
    ; Initialize parameters from the stack
    mov cx, [bp+6]     ; Starting X coordinate
    mov dx, [bp+4]     ; Starting Y coordinate
    mov si, [bp+10]    ; SI points to bitmap data
    mov bx, [bp+8]     ; Bitmap dimension

    ; Calculate xEnding and yEnding
    mov ax, cx
    add ax, bx         ; Add dimension to X 
    mov [bp-4], ax     ; Store xEnding in local variable
    mov ax, dx
    add ax, bx         ; Add dimension to Y
    mov [bp-2], ax     ; Store yEnding in local variable

draw_loopGeneric:
    mov bl, [si]       ; Load byte from bitmap
    inc si             ; Move to next byte
    mov di, 8          ; 8 bits per byte

bit_loopGeneric_:
    shl bl, 1          ; Shift left, bit goes into carry
    jnc skip_pixelGeneric   ; Skip if carry not set

    ; Plot pixel
    mov ah, 0Ch        ; BIOS pixel plot function
    mov bh, 0          ; Page number
    mov al, [bp+12]       ; White color
    int 10h            ; Draw pixel

skip_pixelGeneric:
    inc cx             ; Increment X
    cmp cx, [bp-4]     ; Compare with xEnding
    jl continue_bitGeneric   ; Continue if not reached end

    ; Move to next row
    mov cx, [bp+6]     ; Reset X to starting X
    inc dx             ; Next row
    cmp dx, [bp-2]     ; Check if done
    je doneGeneric           ; Exit if complete

continue_bitGeneric:
    dec di
    jnz bit_loopGeneric_     ; Continue bit processing
    jmp draw_loopGeneric    ; Next byte

doneGeneric:
    ; Restore registers and stack
    pop si
    pop di
    pop dx
    pop cx
    pop bx
    pop ax
    pop es
    mov sp, bp
    pop bp
    ret 10      
	
	

clr_screenGeneric:
    ; Save registers
    push bp
    mov bp, sp
    push ax
    push bx
    push cx
    push dx
    push si
    push di

    ; Get parameters from stack
    mov al, [bp+4]   ; Color
    mov bx, [bp+6]   ; X start
    mov dx, [bp+8]   ; Y start
    mov cx, bx       ; Initial X 

    ; Setup for pixel drawing
    mov ah, 0x0C     ; BIOS interrupt function for drawing pixel
    mov bh, 0        ; Page number (always 0)

draw_row_loop:
    ; Draw current X pixel
    int 10h          ; Draw pixel at current (cx, dx)
    
    inc cx           ; Move to next X coordinate
    
    ; Check if we've reached the end of the width
    mov si, [bp+10]  ; Width
    add si, [bp+6]   ; Add start X to width
    cmp cx, si       ; Compare current X with (starting X + width)
    jl draw_row_loop

    ; Reset X, move to next Y
    mov cx, [bp+6]   ; Reset X to starting X
    inc dx           ; Move to next Y coordinate
    
    ; Check if we've reached the end of the height
    mov si, [bp+12]  ; Height
    add si, [bp+8]   ; Add start Y to height
    cmp dx, si       ; Compare with end Y
    jl draw_row_loop

    ; Restore registers
    pop di
    pop si
    pop dx
    pop cx
    pop bx
    pop ax
    pop bp
    ret 10  ; Cleanup 10 bytes from stack

clr_screen:
    ; Save registers (including BP)
    push ax
    push bx
    push cx
    push dx
    push bp
    push si
    push di

    

	mov ah,0x0C
	mov al,15
    mov bh, 0       ; Page number (always 0 for mode 12h)
    xor cx, cx      ; Start X position from 0
    xor dx, dx      ; Start Y position from 0

draw_screen:
    int 10h         ; Call interrupt 10h, function 0Ch to draw the pixel
    inc cx          ; Increment X (move right)

    cmp cx, 640     ; If X >= 640, move to the next line
    jne next_pixel  ; If not at the end of the row, continue

    xor cx, cx      ; Reset X position to 0
    inc dx          ; Move to the next row (increment Y)

    cmp dx, 480     ; If Y >= 480, we're done
    je finish         ; If at the bottom of the screen, finish

next_pixel:
    jmp draw_screen ; Repeat for the next pixel

finish:
    ; Restore registers (including BP)
    pop di
    pop si
    pop bp
    pop dx
    pop cx
    pop bx
    pop ax
    ret 

clearCursor:
    push bp
    mov bp, sp
    sub sp, 4          ; Make space for 2 local variables (xEnding and yEnding)
    push es
    push ax
    push bx
    push cx
    push dx
    push di
    push si

    ; Initialize parameters from the stack
    mov cx, [bp+6]     ; Starting X coordinate
    mov dx, [bp+4]     ; Starting Y coordinate
    mov si, [bp+10]    ; SI points to bitmap data
    mov bx, [bp+8]     ; Bitmap dimension
    
    ; Calculate xEnding and yEnding
    mov ax, cx
    add ax, bx         ; Add dimension to X 
    mov [bp-4], ax     ; Store xEnding in local variable
    mov ax, dx
    add ax, bx         ; Add dimension to Y
    mov [bp-2], ax     ; Store yEnding in local variable

draw_loopGenericClearCursor:
    mov bl, [si]       ; Load byte from bitmap
    inc si             ; Move to next byte
    mov di, 8          ; 8 bits per byte

bit_loopGeneric_ClearCursor:
    shl bl, 1          ; Shift left, bit goes into carry
    jnc skip_pixelGenericClearCursor   ; Skip if carry not set

    ; Plot pixel
    mov ah, 0Ch        ; BIOS pixel plot function
    mov bh, 0          ; Page number
	mov al,15
         ; White color
    int 10h            ; Draw pixel

skip_pixelGenericClearCursor:
    inc cx             ; Increment X
    cmp cx, [bp-4]     ; Compare with xEnding
    jl continue_bitGenericClearCursor   ; Continue if not reached end

    ; Move to next row
    mov cx, [bp+6]     ; Reset X to starting X
    inc dx             ; Next row
    cmp dx, [bp-2]     ; Check if done
    je doneGenericClearCursor           ; Exit if complete

continue_bitGenericClearCursor:
    dec di
    jnz bit_loopGeneric_ClearCursor     ; Continue bit processing
    jmp draw_loopGenericClearCursor    ; Next byte

doneGenericClearCursor:
    ; Restore registers and stack
    pop si
    pop di
    pop dx
    pop cx
    pop bx
    pop ax
    pop es
    mov sp, bp
    pop bp
    ret 8
updateCardCounterOnScreen:
    push bp
	mov bp,sp
	push ax
    push bx
    push dx
    push cx
	
	xor bx,bx
	mov bl,[cardCountArray]
	dec bx
	shl bx,1
	mov si,bx
	mov di,[notes_array+si]
	push word 1
	push di
	push 8
	push 500
	push 200
	call functionGnericBitmaps
	
		
	xor bx,bx
	mov bl,[cardCountArray+1]
	dec bx
	shl bx,1
	mov si,bx
	mov di,[notes_array+si]
	push word 1
	push di
	push 8
	push 558
	push 200
	call functionGnericBitmaps
	
	xor bx,bx
	mov bl,[cardCountArray+2]
	dec bx
	shl bx,1
	mov si,bx
	mov di,[notes_array+si]
	push word 1
	push di
	push 8
	push 500
	push 270
	call functionGnericBitmaps
	
		
	xor bx,bx
	mov bl,[cardCountArray+3]
	dec bx
	shl bx,1
	mov si,bx
	mov di,[notes_array+si]
	push word 1
	push di
	push 8
	push 558
	push 270
	call functionGnericBitmaps
		xor bx,bx
	mov bl,[cardCountArray+4]
	dec bx
	shl bx,1
	mov si,bx
	mov di,[notes_array+si]
	push word 1
	push di
	push 8
	push 500
	push 340
	call functionGnericBitmaps

	
	xor bx,bx
	mov bl,[cardCountArray+5]
	dec bx
	shl bx,1
	mov si,bx
	mov di,[notes_array+si]
	push word 1
	push di
	push 8
	push 558
	push 340
	call functionGnericBitmaps
	
		
	xor bx,bx
	mov bl,[cardCountArray+6]
	dec bx
	shl bx,1
	mov si,bx
	mov di,[notes_array+si]
	push word 1
	push di
	push 8
	push 500
	push 406
	call functionGnericBitmaps
	xor bx,bx
	mov bl,[cardCountArray+7]
	dec bx
	shl bx,1
	mov si,bx
	mov di,[notes_array+si]
	push word 1
	push di
	push 8
    push 558
	push 406
	call functionGnericBitmaps
	xor bx,bx
	mov bl,[cardCountArray+8]
	dec bx
	shl bx,1
	mov si,bx
	mov di,[notes_array+si]
	push word 1
	push di
	push 8
    push 528
	push 460
	call functionGnericBitmaps
	
	
		
	
	
	
	pop cx
    pop dx
    pop bx
    pop ax
    pop bp
    ret
clear_screenNotes:
  push bp
	mov bp,sp
	push ax
    push bx
    push dx
    push cx
	push word 15
	push clr_ScreenNotes
	push 8
	push 500
	push 200
	call functionGnericBitmaps
	
		
    push word 15
	push clr_ScreenNotes
	push 8
	push 558
	push 200
	call functionGnericBitmaps

    push word 15
	push clr_ScreenNotes
	push 8
	push 500
	push 270
	call functionGnericBitmaps
	
		
    push word 15
	push clr_ScreenNotes
	push 8
	push 558
	push 270
	call functionGnericBitmaps
    
	push word 15
	push clr_ScreenNotes
	push 8
	push 500
	push 340
	call functionGnericBitmaps

	
    push word 15
	push clr_ScreenNotes
	push 8
	push 558
	push 340
	call functionGnericBitmaps
	
		
     push word 15
	push clr_ScreenNotes
	push 8
	push 500
	push 406
	call functionGnericBitmaps
    
	push word 15
	push clr_ScreenNotes
	push 8
    push 558
	push 406
	call functionGnericBitmaps
    
	push word 15
	push clr_ScreenNotes
	push 8
    push 528
	push 460
	call functionGnericBitmaps
	
	
	
	pop cx
    pop dx
    pop bx
    pop ax
    pop bp
    ret
	
	
	Left:db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x80, 0x00, 0x1f, 0xff, 0x80, 0x00, 0x1f, 0xff, 0x80, 0x00, 0x1f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xff, 0x00, 0x3f, 0xe0, 0x3f, 0x00, 0x3f, 0xe0, 0x3f, 0x00, 0x3f, 0xe0, 0x3f, 0x00, 0x3f, 0xe0, 0x3f, 0x00, 0x3f, 0xe0, 0x3f, 0x00, 0x3f, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xff
Right: db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf8, 0x00, 0x01, 0xff, 0xf8, 0x00, 0x01, 0xff, 0xf8, 0x00, 0x01, 0xff, 0xf8, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x00, 0xff, 0xff, 0xc0, 0x00, 0xff, 0xff, 0xc0, 0x00, 0xff, 0xff, 0xf0, 0x00, 0xff, 0xff, 0xf0, 0x00, 0xff, 0xff, 0xf0, 0x00, 0xff, 0xff, 0xfe, 0x00, 0xff, 0xff, 0xfe, 0x00, 0xff, 0xff, 0xfe, 0x00, 0xff, 0xff, 0xfe, 0x00, 0xfc, 0x07, 0xfe, 0x00, 0xfc, 0x07, 0xfe, 0x00, 0xfc, 0x07, 0xfe, 0x00, 0xfc, 0x07, 0xfe, 0x00, 0xfc, 0x07, 0xfe, 0x00, 0xff, 0xff, 0xfe, 0x00, 0xff, 0xff, 0xfe, 0x00, 0xff, 0xff, 0xfe, 0x00, 0xff, 0xff, 0xfe, 0x00	
Bottom: db 0x00, 0x3f, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xff, 0x03, 0xff, 0xff, 0xff, 0x03, 0xff, 0xff, 0xff, 0x03, 0xff, 0xff, 0xff, 0x03, 0xff, 0xff, 0xff, 0x03, 0xff, 0xff, 0xff, 0x03, 0xff, 0xff, 0xff, 0x03, 0xff, 0xff, 0xff, 0x03, 0xff, 0xff, 0xff, 0x03, 0xff, 0xff, 0xff, 0x03, 0xff, 0xff, 0xff, 0x03, 0xc1, 0xe0, 0x00, 0x03, 0xc1, 0xe0, 0x00, 0x03, 0xc1, 0xe0, 0x00, 0x03, 0xc1, 0xe0, 0x00, 0x03, 0xc1, 0xe0, 0x00, 0x03, 0xc1, 0xe0, 0x00, 0x03, 0xc1, 0xe0, 0x00, 0x03, 0xc1, 0xe0, 0x00, 0x03, 0xc1, 0xe0, 0x00, 0x03, 0xc1, 0xe0, 0x00, 0x03, 0xc1, 0xe0, 0x00, 0x03, 0xc1, 0xe0, 0x00, 0x03, 0xc1, 0xe0, 0x00, 0x03, 0xc1, 0xe0, 0x00, 0x03, 0xc1, 0xe0, 0x00, 0xff, 0xc0, 0x1f, 0xe0, 0xff, 0xc0, 0x1f, 0xe0, 0xff, 0xc0, 0x1f, 0xe0, 0xff, 0xc0, 0x1f, 0xe0
BottomRight:db 0xff, 0xff, 0xfc, 0x00, 0xff, 0xff, 0xfc, 0x00, 0xff, 0xff, 0xfc, 0x00, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x07, 0x83, 0xc0, 0x00, 0x07, 0x83, 0xc0, 0x00, 0x07, 0x83, 0xc0, 0x00, 0x07, 0x83, 0xc0, 0x00, 0x07, 0x83, 0xc0, 0x00, 0x07, 0x83, 0xc0, 0x00, 0x07, 0x83, 0xc0, 0x00, 0x07, 0x83, 0xc0, 0x00, 0x07, 0x83, 0xc0, 0x00, 0x07, 0x83, 0xc0, 0x00, 0x07, 0x83, 0xc0, 0x00, 0x07, 0x83, 0xc0, 0x00, 0x07, 0x83, 0xc0, 0x00, 0x07, 0x83, 0xc0, 0x00, 0x07, 0x83, 0xc0, 0x07, 0xf8, 0x03, 0xff, 0x07, 0xf8, 0x03, 0xff, 0x07, 0xf8, 0x03, 0xff, 0x07, 0xf8, 0x03, 0xff
G:db 0x1f, 0xff, 0xff, 0xfe, 0x10, 0x00, 0x00, 0x02, 0x70, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x02, 0x47, 0xff, 0xff, 0xfe, 0x44, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xff, 0xfe, 0x44, 0x08, 0x00, 0x02, 0x44, 0x08, 0x00, 0x02, 0x44, 0x0f, 0xff, 0xf2, 0x44, 0x00, 0x00, 0x12, 0x44, 0x00, 0x00, 0x12, 0x44, 0x00, 0x00, 0x12, 0x44, 0x00, 0x00, 0x12, 0x44, 0x00, 0x00, 0x12, 0x44, 0x00, 0x00, 0x12, 0x44, 0x00, 0x00, 0x12, 0x47, 0xff, 0xff, 0xf2, 0x40, 0x00, 0x00, 0x02, 0x70, 0x00, 0x00, 0x02, 0x10, 0x00, 0x00, 0x02, 0x1f, 0xff, 0xff, 0xfe	
A: db 0x3f, 0xff, 0xff, 0xfc, 0x20, 0x00, 0x00, 0x04, 0x60, 0x00, 0x00, 0x06, 0x40, 0x00, 0x00, 0x02, 0x43, 0xff, 0xff, 0xe2, 0x42, 0x00, 0x00, 0x22, 0x42, 0x00, 0x00, 0x22, 0x42, 0x00, 0x00, 0x22, 0x42, 0x00, 0x00, 0x22, 0x43, 0xff, 0xff, 0xe2, 0x40, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x02, 0x4f, 0xff, 0xff, 0xf2, 0x48, 0x00, 0x00, 0x12, 0x48, 0x00, 0x00, 0x12, 0x48, 0x00, 0x00, 0x12, 0x48, 0x00, 0x00, 0x12, 0x48, 0x00, 0x00, 0x12, 0x48, 0x00, 0x00, 0x12, 0x48, 0x00, 0x00, 0x12, 0x48, 0x00, 0x00, 0x12, 0x48, 0x00, 0x00, 0x12, 0x48, 0x00, 0x00, 0x12, 0x48, 0x00, 0x00, 0x12, 0x48, 0x00, 0x00, 0x12, 0x48, 0x00, 0x00, 0x12, 0x48, 0x00, 0x00, 0x12, 0x48, 0x00, 0x00, 0x12, 0x48, 0x00, 0x00, 0x12, 0x48, 0x00, 0x00, 0x12, 0x48, 0x00, 0x00, 0x12, 0x78, 0x00, 0x00, 0x1e
M:db 0x3f, 0xff, 0xff, 0xfc, 0x20, 0x00, 0x00, 0x04, 0x60, 0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x02, 0x47, 0xc3, 0xe1, 0xf2, 0x44, 0x42, 0x21, 0x12, 0x44, 0x42, 0x21, 0x12, 0x44, 0x42, 0x21, 0x12, 0x44, 0x42, 0x21, 0x12, 0x44, 0x42, 0x21, 0x12, 0x44, 0x42, 0x21, 0x12, 0x44, 0x42, 0x21, 0x12, 0x44, 0x42, 0x21, 0x12, 0x44, 0x42, 0x21, 0x12, 0x44, 0x42, 0x21, 0x12, 0x44, 0x42, 0x21, 0x12, 0x44, 0x42, 0x21, 0x12, 0x44, 0x42, 0x21, 0x12, 0x44, 0x42, 0x21, 0x12, 0x44, 0x42, 0x21, 0x12, 0x44, 0x42, 0x21, 0x12, 0x44, 0x42, 0x21, 0x12, 0x44, 0x42, 0x21, 0x12, 0x44, 0x42, 0x21, 0x12, 0x44, 0x42, 0x21, 0x12, 0x44, 0x42, 0x21, 0x12, 0x44, 0x42, 0x21, 0x12, 0x44, 0x42, 0x21, 0x12, 0x44, 0x42, 0x21, 0x12, 0x44, 0x42, 0x21, 0x12, 0x44, 0x42, 0x21, 0x12, 0x7c, 0x7e, 0x3f, 0x1e	
E: db 0x3f, 0xff, 0xff, 0xfc, 0x20, 0x00, 0x00, 0x04, 0x60, 0x00, 0x00, 0x04, 0x47, 0xff, 0xff, 0xfc, 0x44, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x47, 0xff, 0xff, 0xfc, 0x40, 0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x04, 0x47, 0xff, 0xff, 0xfc, 0x44, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x47, 0xff, 0xff, 0xfc, 0x60, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x04, 0x3f, 0xff, 0xff, 0xfc	
O:db 0x7f, 0xff, 0xff, 0xfe, 0x40, 0x00, 0x00, 0x02, 0xc0, 0x00, 0x00, 0x01, 0x8f, 0xff, 0xff, 0xf1, 0x88, 0x00, 0x00, 0x11, 0x88, 0x00, 0x00, 0x11, 0x88, 0x00, 0x00, 0x11, 0x88, 0x00, 0x00, 0x11, 0x88, 0x00, 0x00, 0x11, 0x88, 0x00, 0x00, 0x11, 0x88, 0x00, 0x00, 0x11, 0x88, 0x00, 0x00, 0x11, 0x88, 0x00, 0x00, 0x11, 0x88, 0x00, 0x00, 0x11, 0x88, 0x00, 0x00, 0x11, 0x88, 0x00, 0x00, 0x11, 0x88, 0x00, 0x00, 0x11, 0x88, 0x00, 0x00, 0x11, 0x88, 0x00, 0x00, 0x11, 0x88, 0x00, 0x00, 0x11, 0x88, 0x00, 0x00, 0x11, 0x88, 0x00, 0x00, 0x11, 0x88, 0x00, 0x00, 0x11, 0x88, 0x00, 0x00, 0x11, 0x88, 0x00, 0x00, 0x11, 0x88, 0x00, 0x00, 0x11, 0x88, 0x00, 0x00, 0x11, 0x88, 0x00, 0x00, 0x11, 0x8f, 0xff, 0xff, 0xf1, 0xc0, 0x00, 0x00, 0x03, 0x40, 0x00, 0x00, 0x02, 0x7f, 0xff, 0xff, 0xfe	
V:db 0x7e, 0x00, 0x00, 0x7e, 0x42, 0x00, 0x00, 0x42, 0x42, 0x00, 0x00, 0x42, 0x42, 0x00, 0x00, 0x42, 0x42, 0x00, 0x00, 0x42, 0x42, 0x00, 0x00, 0x42, 0x42, 0x00, 0x00, 0x42, 0x42, 0x00, 0x00, 0x42, 0x42, 0x00, 0x00, 0x42, 0x42, 0x00, 0x00, 0x42, 0x42, 0x00, 0x00, 0x42, 0x42, 0x00, 0x00, 0x42, 0x42, 0x00, 0x00, 0x42, 0x42, 0x00, 0x00, 0x42, 0x42, 0x00, 0x00, 0x42, 0x42, 0x00, 0x00, 0x42, 0x42, 0x00, 0x00, 0x42, 0x43, 0xf0, 0x0f, 0xc2, 0x40, 0x10, 0x08, 0x02, 0x70, 0x1e, 0x78, 0x0e, 0x10, 0x02, 0x40, 0x08, 0x1c, 0x03, 0xc0, 0x38, 0x04, 0x00, 0x00, 0x20, 0x07, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00, 0x80, 0x01, 0xc0, 0x03, 0x80, 0x00, 0x40, 0x02, 0x00, 0x00, 0x70, 0x0e, 0x00, 0x00, 0x10, 0x08, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	
;E:db 0x7f, 0xff, 0xff, 0xfe, 0x40, 0x00, 0x00, 0x02, 0xc0, 0x00, 0x00, 0x02, 0x80, 0x00, 0x00, 0x02, 0x8f, 0xff, 0xff, 0xfe, 0x88, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x8f, 0xff, 0xff, 0xfe, 0x80, 0x00, 0x00, 0x02, 0x80, 0x00, 0x00, 0x02, 0x80, 0x00, 0x00, 0x02, 0x8f, 0xff, 0xff, 0xfe, 0x88, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x8f, 0xff, 0xff, 0xfe, 0x80, 0x00, 0x00, 0x02, 0xc0, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x02, 0x7f, 0xff, 0xff, 0xfe	
R:db 0x7f, 0xff, 0xff, 0xfe, 0x40, 0x00, 0x00, 0x02, 0xc0, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x01, 0x87, 0xff, 0xff, 0xc1, 0x84, 0x00, 0x00, 0x41, 0x84, 0x00, 0x00, 0x41, 0x84, 0x00, 0x00, 0x41, 0x84, 0x00, 0x00, 0x41, 0x84, 0x00, 0x00, 0x41, 0x84, 0x00, 0x00, 0x41, 0x84, 0x00, 0x00, 0x41, 0x87, 0xff, 0xff, 0xc1, 0x80, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x08, 0x80, 0x00, 0x00, 0x08, 0x80, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x01, 0x83, 0xff, 0xff, 0xc1, 0x82, 0x00, 0x00, 0x41, 0x82, 0x00, 0x00, 0x41, 0x82, 0x00, 0x00, 0x41, 0x82, 0x00, 0x00, 0x41, 0x82, 0x00, 0x00, 0x41, 0x82, 0x00, 0x00, 0x41, 0x82, 0x00, 0x00, 0x41, 0x82, 0x00, 0x00, 0x41, 0x82, 0x00, 0x00, 0x41, 0x82, 0x00, 0x00, 0x41, 0x82, 0x00, 0x00, 0x41, 0x82, 0x00, 0x00, 0x41, 0xfe, 0x00, 0x00, 0x7f 	
	backGroundPrintingUtilEndScreen:
  MOV AL, 0        ; Color index (0 in this case)
  MOV DX, 0x3C8    ; VGA palette index port
  OUT DX, AL       ; Select color index 0 (background)

  MOV DX, 0x3C9    ; VGA palette data port
  
  ; Current values create a white/bright color
  MOV AL, 63     ; Maximum intensity for Red
  OUT DX, AL
  MOV AL, 63      ; Maximum intensity for Green
  OUT DX, AL
  MOV AL ,63     ; Maximum intensity for Blue
  OUT DX, AL

  ; To change color, modify these three OUT DX, AL instructions

  ; Example for pure red:
  ; MOV AL, 63     ; Red at full intensity
  ; OUT DX, AL
  ; MOV AL, 0      ; Green at zero
  ; OUT DX, AL
  ; MOV AL, 0      ; Blue at zero
  ; OUT DX, AL

  ret
delayEnd:
    push cx
    mov cx, 0xffff
.l1: loop .l1
    pop cx
    ret
SuperDelayEnd:
    push bp
	mov bp,sp
	call delayEnd
	call delayEnd
	call delayEnd
	call delayEnd
	call delayEnd
	pop bp
	ret
PrintEnd:
    push bp
    mov bp, sp
    sub sp, 4          ; Make space for 2 local variables (xEnding and yEnding)
    push es
    push ax
    push bx
    push cx
    push dx
    push di
    push si
    

	
	call backGroundPrintingUtilEndScreen
	push 1
	push 150        ; Current X-coordinate
    push word 145      ; Starting Y
    push word 365     ; Ending Y
    call print_vertical
	push 1
	push 150+1        ; Current X-coordinate
    push word 145      ; Starting Y
    push word 365     ; Ending Y
    call print_vertical
	push 1
	push 150-1        ; Current X-coordinate
    push word 145      ; Starting Y
    push word 365     ; Ending Y
    call print_vertical
	push 1
	push 150+300        ; Current X-coordinate
    push word 145      ; Starting Y
    push word 365     ; Ending Y
    call print_vertical
		push 1
	push 150+300+1        ; Current X-coordinate
    push word 145      ; Starting Y
    push word 365     ; Ending Y
    call print_vertical
		push 1
	push 150+300-1        ; Current X-coordinate
    push word 145      ; Starting Y
    push word 365     ; Ending Y
    call print_vertical

    push word 1      ; Color
    push word 150   ; Starting X
    push word 450    ; Ending X
    push 145          ; Current Y-coordinate
    call print_horizontal
    push word 1      ; Color
    push word 150   ; Starting X
    push word 450    ; Ending X
    push 145+1          ; Current Y-coordinate
    call print_horizontal
	push word 1      ; Color
    push word 150   ; Starting X
    push word 450    ; Ending X
    push 145-1          ; Current Y-coordinate
    call print_horizontal
	push word 1      ; Color
    push word 150   ; Starting X
    push word 450    ; Ending X
    push 145+220          ; Current Y-coordinate
    call print_horizontal
	push word 1      ; Color
    push word 150   ; Starting X
    push word 450    ; Ending X
    push 145+220+1          ; Current Y-coordinate
    call print_horizontal
	push word 1      ; Color
    push word 150   ; Starting X
    push word 450    ; Ending X
    push 145+220-1          ; Current Y-coordinate
    call print_horizontal
	call SuperDelayEnd
	push 1
	push Bottom
	push 32
	push 265
	push 160+32
	call functionGnericBitmaps
	call SuperDelayEnd
    push 1
	push Left
	push 32
	push 265
	push 160
	call functionGnericBitmaps

     call SuperDelayEnd
	 push 1
	 push BottomRight
	 push 32
	 push 265+32
	 push 160+32
	 call functionGnericBitmaps
	 call SuperDelayEnd
	 push 1
	 push Right
	 push 32
	 push 297
	 push 160
	 call functionGnericBitmaps
	 call SuperDelayEnd
	 mov ax,210
	 push 1
	 push G
	 push 32
	 push 220
	 push 240
	 call functionGnericBitmaps
	 call SuperDelayEnd
	 push 1
	 push E
	 push 32
	 push 220+40+40+40
	 push 240
	 call functionGnericBitmaps
	 call SuperDelayEnd
	 push 1
	 push A
	 push 32
	 push 220+40
	 push 240
	 call functionGnericBitmaps
	 call SuperDelayEnd
	 push 1
	 push V
	 push 32
	 push 220+40
	 push 240+40 
	 call functionGnericBitmaps
	 push 1
	 push R
	 push 32
	 push 220+40+40+40
	 push 240+40 
	 call functionGnericBitmaps
	 call SuperDelayEnd
	 push 1
	 push M
	 push 32
	 push 220+40+40
	 push 240
	 call functionGnericBitmaps

     call SuperDelayEnd
	 push 1
	 push O
	 push 32
	 push 220
	 push 240+40
	 call functionGnericBitmaps
	 push 1
	 call SuperDelayEnd
	 push 1
	 push E
	 push 32
	 push 220+40+40
	 push 240+40 
	 call functionGnericBitmaps
	

	pop si
    pop di
    pop dx
    pop cx
    pop bx
    pop ax
    pop es
    mov sp, bp
    pop bp
	ret

